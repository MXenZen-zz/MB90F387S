/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
/* General Purpose Timer								      			     */
/**
 *	@file		TMR/gpt.h
 * 	@brief		This file contains GPT flags, types and getters.
**/
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 *	This file is part of LibMB90385 (Software Library for MB90385 Series).
 *
 *	Copyright (C) 2015-2017 Xeno Xerxes Masong (xxmasong@gmail.com)
 *
 *	LibMB90385 does not guarantee that it shall fulfill its task under all
 *	circumstances. Thus, the author/developer shall not be held liable for
 *	any damages that might be incurred by the device using LibMB90385, or
 *	for any reason whatsoever.
 *
 *	LibMB90385 is free software: you can redistribute it and/or modify it
 *	under the terms of the GNU General Public License as published by the
 *	Free Software Foundation, either version 3 of the License, or (at your
 *	option) any later version.
 *
 *	LibMB90385 is distributed in the hope that it will be useful, but WITHOUT
 *	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 *	FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 *	for more details.
 *
 *	You should have received a copy of the GNU General Public License along
 *	with LibMB90385. If not, see <https://www.gnu.org/licenses/>.
 *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

#ifndef GPT_H
#define GPT_H

#include <IO/io_mb90385.h>

/* ----------------------------------------------------------------------------
**	GPT Flags.
*/

/**
 * 	@def		GPT_HCLK
 *	@brief 		This clock is generated by connecting an oscillator or inputting
 *				an external clock to the high-speed oscillation pins (X0 and X1).
 */
#define GPT_HCLK				(4000000UL)

/**
 * 	@def		GPT_PCLK
 *	@brief 		This clock is multiplied by the PLL clock multiplying circuit
 *				(PLL oscillator) selected from four types of clock according to
 *				the setting of the multiplication rate select bits.
 *  @note		The PLL clock multiplier or factor of the bootloader must
 *  			be set to four (x4) for compatibility purposes.
 */
#define GPT_PCLK				(4UL * GPT_HCLK)

/**
 * 	@def		GPT_MCLK
 *	@brief 		This clock is 2-frequency division of oscillation clock and is
 *				an input clock to the timebase timer and clock selector.
 */
#define GPT_MCLK				(GPT_HCLK / 2UL)

/**
 * 	@def		GPT_FCLK
 *	@brief 		This clock is an operating clock for the CPU and the resources
 *				selected either from the main clock, subclock, and four types
 *				of PLL clock.
 *  @note		The machine clock of the bootloader must be set to PLL clock
 *  			for compatibility purposes.
 *	@note		One cycle of the machine clock is a machine cycle (1 / f).
 */
#define GPT_FCLK				GPT_PCLK

/**
 * 	@def		GPT_SCLK
 *	@brief 		This clock is a clock with 4-frequency division of the clock
 * 				generated by connecting an oscillator or inputting an external
 * 				clock to the low-speed oscillation pins (X0A and X1A).
 *  @note		The subclock of the bootloader must be set to operate under
 *  			main clock for compatibility purposes.
 * 	@note		There is no subclock in MB90F387S and MB90387S.
 */
#define GPT_SCLK

/**
 * 	@def		GPT_RES_8BIT
 *	@brief 		8-bit resolution in bits.
 */
#define GPT_RES_8BIT	 		(8UL)

/**
 * 	@def		GPT_RES_16BIT
 *	@brief 		16-bit resolution in bits.
 */
#define GPT_RES_16BIT	 		(16UL)

/**
 * 	@def		GPT_MSEC_IN_SEC
 *	@brief 		Conversion factor for seconds to milliseconds.
 */
#define GPT_MSEC_IN_SEC			(1000UL)

/**
 * 	@def		GPT_USEC_IN_SEC
 *	@brief 		Conversion factor for seconds to microseconds.
 */
#define GPT_USEC_IN_SEC			(1000000UL)

/* ----------------------------------------------------------------------------
**	GPT Types.
*/

/**
 *	@brief 		Callback type for GPT interrupt user routine functions.
 */
typedef T_void (*T_gptISRHook)(T_void);

/**
 * 	@brief		Defined enumerated type for GPT count clock divisions.
 */
typedef enum {
	GPT_CLK_DIV_1,				/**< CLK / 1 */
	GPT_CLK_DIV_2,				/**< CLK / 2 */
	GPT_CLK_DIV_4,				/**< CLK / 4 */
	GPT_CLK_DIV_8,				/**< CLK / 8 */
	GPT_CLK_DIV_16,				/**< CLK / 16 */
	GPT_CLK_DIV_32,				/**< CLK / 32 */
	GPT_CLK_DIV_64,				/**< CLK / 64 */
	GPT_CLK_DIV_128,			/**< CLK / 128 */
	GPT_CLK_DIV_256,			/**< CLK / 256 */
	GPT_CLK_DIV_512,			/**< CLK / 512 */
	GPT_CLK_DIV_1024,			/**< CLK / 1024 */
	GPT_CLK_DIV_2048,			/**< CLK / 2048 */
	GPT_CLK_DIV_4096,			/**< CLK / 4096 */
	GPT_CLK_DIV_8192,			/**< CLK / 8192 */
	GPT_CLK_DIV_16384,			/**< CLK / 16384 */
	GPT_CLK_DIV_32768			/**< CLK / 32768 */
} T_gptClkDiv;

/**
 * 	@brief		Defined type for GPT microsecond interval duration data type
 * 				width (default: 32 bits).
 */
typedef T_uint32 T_gptInterval;

/**
 * 	@brief		Defined type for GPT count-related data type width
 * 				(default: 32 bits).
 */
typedef T_uint32 T_gptCount;

/**
 * 	@brief		Defined type for GPT clock cycles in hertz data type width
 * 				(default: 32 bits).
 */
typedef T_uint32 T_gptFrequency;

/**
 * 	@brief		Defined type for GPT counter reload register data type width
 * 				(default: 16 bits).
 */
typedef T_uint16 T_gptReload;

/**
 * 	@brief		Defined type for GPT duty cycle data type width
 * 				(default: 8 bits).
 */
typedef T_uint8 T_gptDutyCycle;

/* ----------------------------------------------------------------------------
**	GPT Getters.
*/

/**
 *	@def		GetDWordGPTTicksDuration
 *	@brief		Timer count ticks duration getter.
 * 	@param[in] 	TCK		Count ticks (dword).
 * 	@param[in] 	DIV		Clock division (byte).
 * 	@param[in] 	CLK		Clock cycles per microseconds (dword).
 * 	@param[in] 	CTC		Clock cycles to time conversion (dword).
 * 	@return		duration (dword).
 */
#define GetDWordGPTTicksDuration(TCK, DIV, CLK, CTC) \
	((T_dword)(((TCK) * ToBit(DIV)) / ((CLK) / (CTC))))

/**
 *	@def		GetDWordGPTFullDuration
 *	@brief		Timer count full duration getter.
 * 	@param[in] 	RES		Counter resolution bits (byte).
 * 	@param[in] 	DIV		Clock division (byte).
 * 	@param[in] 	CLK		Clock cycles per microseconds (dword).
 * 	@param[in] 	CTC		Clock cycles to time conversion (dword).
 * 	@return		duration (dword).
 */
#define GetDWordGPTFullDuration(RES, DIV, CLK, CTC) \
	((T_dword)((ToBit(RES) * ToBit(DIV)) / ((CLK) / (CTC))))

/**
 *	@def		GetWordGPTOFReloadValue
 *	@brief		Reload value for incremental (overflow) counter getter.
 * 	@param[in] 	IVD		Interval duration (dword).
 * 	@param[in] 	RES		Counter resolution bits (byte).
 * 	@param[in] 	DIV		Clock division (byte).
 * 	@param[in] 	CLK		Clock cycles per microseconds (dword).
 * 	@param[in] 	CTC		Clock cycles to time conversion (dword).
 * 	@return		reload value (word).
 */
#define GetWordGPTOFReloadValue(IVD, RES, DIV, CLK, CTC) \
	((T_word)(ToBit(RES) - (((IVD) * ((CLK) / (CTC))) / ToBit(DIV))))

/**
 *	@def		GetWordGPTUFReloadValue
 *	@brief		Reload value for decremental (underflow) counter getter.
 * 	@param[in] 	IVD		Interval duration (dword).
 * 	@param[in] 	RES		Counter resolution bits (byte).
 * 	@param[in] 	DIV		Clock division (byte).
 * 	@param[in] 	CLK		Clock cycles per microseconds (dword).
 * 	@param[in] 	CTC		Clock cycles to time conversion (dword).
 * 	@return		reload value (word).
 */
#define GetWordGPTUFReloadValue(IVD, RES, DIV, CLK, CTC) \
	((T_word)((((IVD) * ((CLK) / (CTC))) / ToBit(DIV)) - 1UL))

#endif /* GPT_H. */
